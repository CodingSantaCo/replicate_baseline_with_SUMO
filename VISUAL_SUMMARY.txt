================================================================================
                    VISUAL SUMMARY: R CALCULATION BUG
================================================================================

QUESTION: Is R1 (all stopped vehicles) a valid approximation for holding
          vehicles?

ANSWER:   NO - This is a CONFIRMED CONCEPTUAL BUG


================================================================================
                            THE SCENARIO
================================================================================

Configuration:
  ├─ Lane length (l):        1000 m
  ├─ Free-flow speed (vf):   13.89 m/s
  ├─ Free-flow time (τff):   72 seconds  ← KEY VALUE
  ├─ Cycle:                  60 s
  └─ Red duration:           30 s


================================================================================
                      PAPER'S DEFINITION
================================================================================

"Holding vehicles are vehicles that, based on their projected trajectories
using cruise speeds, SHOULD HAVE BEEN DISCHARGED by that instant but remain
held by the system."

Translation:

  Holding vehicle = Vehicle in lane at EoR that:
                    • Entered before (t_EoR - τff)
                    • Would have exited if traveling at free-flow speed
                    • Is "held" by the signal


================================================================================
                     AT FIRST EoR (t = 30s)
================================================================================

Timeline:
  ═══════════════════════════════════════════════════════════════════════════
  -42s                  0s                              30s
   │                    │                                │
   └─────────────────────────────────────────────────────┘
   Cutoff time          Sim starts                      EoR
   (t - τff = -42s)


Vehicles that SHOULD have been discharged:
  → Those that entered before -42s
  → Count: ZERO (simulation starts at t=0)
  → TRUE R = 0 ✓


What current implementation calculates:
  → R1 = count of ALL stopped vehicles
  → At t=30s: ~12 vehicles arrived and are stopped
  → CALCULATED R = 12 ✗

  ┌──────────────────────────────────────────────────────────────┐
  │  ERROR:  CALCULATED R / TRUE R  =  12 / 0  =  INFINITE!     │
  └──────────────────────────────────────────────────────────────┘


================================================================================
                      VISUAL REPRESENTATION
================================================================================

Correct understanding (what paper means):

  t=-42s          t=0s          t=10s         t=20s         t=30s (EoR)
    │              │              │              │              │
    │              ▼              ▼              ▼              ▼
    ├──────────────┼──────────────┼──────────────┼──────────────┤
    │              ●─────────────────────────────→ (exited)
    │              │              ●──────────────────────────────→ (exited)
    │              │              │              ●───────────────→ (would exit)
    │              │              │              │              ● (just arrived)
    └──────────────┴──────────────┴──────────────┴──────────────┘
    ↑                                                            ↑
    Cutoff                                                       EoR
    (enter before this
     → holding vehicle)

  Holding vehicles at EoR: ZERO (all vehicles entered after -42s)


Incorrect implementation (what code does):

  t=0s          t=10s         t=20s         t=30s (EoR)
    │              │              │              │
    ▼              ▼              ▼              ▼
    ┼──────────────┼──────────────┼──────────────┤
    ●──────────────■ (stopped)                   │
    │              ●──────────────■ (stopped)    │
    │              │              ●──────────────■ (stopped)
    │              │              │              ● (just arrived, stopped)
    └──────────────┴──────────────┴──────────────┘
                                                  ↑
                                                  EoR

  Code counts ALL stopped vehicles: ~12 vehicles ✗
  Should count only those that entered before -42s: 0 vehicles ✓


================================================================================
                         WHY R2 DOESN'T FIX IT
================================================================================

R2 Formula:
  R2 = q_nc × effective_window
  where effective_window = max(0, (t_EoR - τff) - T_k1)

At first EoR (t=30s):
  effective_window = max(0, (30 - 72) - T_k1)
                   = max(0, -42 - T_k1)
                   ≈ 0  (negative or zero)

  Therefore: R2 ≈ 0

  Final R = R1 + R2 ≈ 12 + 0 = 12 ✗

  ┌────────────────────────────────────────────────────────────┐
  │  R2 doesn't compensate for R1's overcounting!              │
  └────────────────────────────────────────────────────────────┘


================================================================================
                          NUMERIC COMPARISON
================================================================================

                         TRUE R         CALCULATED R        ERROR
  ────────────────────────────────────────────────────────────────────
  First EoR (t=30s)       0               12               +12 (∞%)
  Second EoR (t=90s)      ~3              15               +12 (400%)
  Steady state            ~8              15               +7  (88%)
  ────────────────────────────────────────────────────────────────────

  Note: Numbers are estimates assuming q=0.4 veh/s


================================================================================
                         THE CORRECT APPROACH
================================================================================

Step 1: Track entry times
  ┌─────────────────────────────────────────────────────────────┐
  │ entry_times = df_lane.groupby("id")["time"].min()          │
  └─────────────────────────────────────────────────────────────┘

Step 2: At EoR, filter by time in lane
  ┌─────────────────────────────────────────────────────────────┐
  │ cutoff_time = eor_time - tau_ff                            │
  │ holding_vehicles = vehicles where entry_time < cutoff_time │
  │ R = count(holding_vehicles)                                │
  └─────────────────────────────────────────────────────────────┘

Step 3: Split by CV/NC
  ┌─────────────────────────────────────────────────────────────┐
  │ R_CV = count(holding_vehicles that are CVs)                │
  │ R_NC = count(holding_vehicles that are NCs)                │
  └─────────────────────────────────────────────────────────────┘


================================================================================
                            KEY EVIDENCE
================================================================================

✓ FCD data contains entry time information
  → File: estimate_Q_from_CV_only.py already uses first_seen times

✓ Paper's definition is clear and precise
  → No ambiguity about "should have been discharged"

✓ Current implementation doesn't check entry times
  → Simply counts all stopped vehicles

✓ Your analysis is 100% correct
  → R1 overcounts, especially in early cycles


================================================================================
                              VERDICT
================================================================================

  ┌────────────────────────────────────────────────────────────────┐
  │                                                                │
  │  STATUS:  CONFIRMED CONCEPTUAL BUG                            │
  │                                                                │
  │  SEVERITY:  HIGH (infinite error in early cycles)             │
  │                                                                │
  │  FIXABLE:   YES (entry time tracking is feasible)             │
  │                                                                │
  │  IMPACT:    Cascades to Q estimation and location accuracy    │
  │                                                                │
  └────────────────────────────────────────────────────────────────┘


  R1 (all stopped) ≠ Holding vehicles

  Not all stopped vehicles are "holding vehicles" - only those that have
  been in the lane longer than tau_ff.


================================================================================
                          FILES CREATED
================================================================================

1. ANSWER_TO_USER_QUESTION.md
   → Direct answer with full reasoning

2. R_CALCULATION_CONCEPTUAL_ISSUE_ANALYSIS.md
   → Comprehensive technical analysis

3. analyze_R_conceptual_issue.py
   → Theoretical demonstration (run with: python analyze_R_conceptual_issue.py)

4. correct_R_calculation_example.py
   → Proof-of-concept implementation (requires fcd_output.xml)

5. VISUAL_SUMMARY.txt (this file)
   → Quick reference guide


================================================================================
                           NEXT STEPS
================================================================================

1. Run proof-of-concept on your SUMO data to quantify actual error
   └─> python correct_R_calculation_example.py

2. Implement correct R calculation with entry time tracking

3. Re-run baseline experiments with corrected R

4. Validate against SUMO ground truth


================================================================================
                          YOUR ANALYSIS
================================================================================

"This suggests R1 is overcounting! Not all stopped vehicles are 'holding
vehicles' - only those that have been in the lane longer than tau_ff."

                              ✓ CORRECT

Your instinct was absolutely right. This is not an approximation - it's a bug.


================================================================================
